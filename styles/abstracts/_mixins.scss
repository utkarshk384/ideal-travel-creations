@use "../vendors/include-media";
@use "variables";
@use "sass:map";
@use "sass:meta";
@use "sass:list";

// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

//-------------------------------
//     General mixins
//-------------------------------

//Font Mixins
/// @access public
/// @param {Number} $weight - Font weight variables
/// @param {String} $style - Font styles that are defined in the _font.scss
@mixin font($weight, $style) {
  font-family: $style;
  font-weight: $weight;

  line-height: 1.5;
}

//Centers the container in the viewport
/// @access public
/// @param {Number} $width - Any css unit for width property
/// @param {Boolean} $padding - if true, it adds padding to the left and right side of the container in screens bigger than the lg breakpoint
/// @param {CSS Unit} $cust-padding - The value of padding to be applied
/// @param {Boolean} $responsive-xxs - if true, the container would be slightly bigger for extra-small screen devices than the stipulated width
@mixin Container(
  $width,
  $padding: false,
  $cust-padding: 0em calc(#{$width} * 0.01),
  $responsive-xxs: false
) {
  width: $width;
  margin-left: auto;
  margin-right: auto;

  @content;

  @if $responsive-xxs {
    @include include-media.media("<325px") {
      @if (#{$width} == "100%") {
        width: $width;
      } @else {
        width: calc(#{$width} * 1.05);
      }
    }
  }
  @if $padding {
    @include include-media.media(">=lg") {
      width: calc(#{$width} * 1.01);
      padding: $cust-padding;
    }
  }

  @include include-media.media(">3000px") {
    width: 96rem;
  }
}

//-------------------------------
//     Flex related mixins
//-------------------------------

//Mobile first Flex design
///Behavior of the flex design:

///1. Any screen above lg breakpoint, the styles of the breakpoint will be applied.
///2. Any styles written in the @content section will also be applied to the large breakpoint until unless it is overwritten using the @param $breakpoint-css parameter of the mixin.
///Eg: if justify-content: center is set inside the @content then this style is also applied to screen sizes bigger than large screen.

///@access public
///@param {String, Number} $breakpoint - specify the string or Number value of the breakpoint.
///@param {Map} $breakpoint-css - Optional css given to the css for the breakpoint.
///@param {Boolean} $isEqual - If true the breakpoint will be ">=" else ">".
///@param {Boolean} $center - Aligns and justify the content in the center in all screen sizes.

$flex-config: (
  flex-wrap: nowrap,
);
@mixin flex(
  $breakpoint: "lg",
  $breakpoint-css: $flex-config,
  $isEqual: true,
  $center: false
) {
  $sign: ">=";
  @if not $isEqual {
    $sign: ">";
  }

  display: flex;
  flex-direction: column;

  @if $center or $center == "vertical" {
    justify-content: center;
    align-items: center;
  }

  @content;

  @include include-media.media("#{$sign}#{$breakpoint}") {
    @if not map.has-key($breakpoint-css, flex-direction) {
      flex-direction: row;
    }
    @each $property, $value in $breakpoint-css {
      #{$property}: $value;
    }

    @if $center or $center == "horizontal" {
      justify-content: center;
      align-items: center;
    }
  }
}

//Responsive margins for flex items
/// @access public
/// @param {Number} $margin - Any css unit for margin
/// @param {String} $axis - the orientation for the margin to be applied, values: horizontal, vertical
@mixin flex-Margin($margin: 1rem, $axis: horizontal, $breakpoint: "lg") {
  $margin-vertical: #{$margin};
  $margin-horizontal: #{$margin};

  @if (meta.type-of($margin) == "list") {
    $margin-vertical: list.nth($margin, 1);
    $margin-horizontal: list.nth($margin, 2);
  }

  @if ($axis == horizontal) {
    margin-top: $margin-vertical;
    margin-bottom: $margin-vertical;
    margin-right: calc(#{$margin-horizontal} * 0.1);

    @content;
    @include include-media.media(">=#{$breakpoint}") {
      margin: calc(#{$margin-vertical} * 0.2) $margin-horizontal;
    }
  } @else if($axis == vertical) {
    margin-bottom: $margin-vertical;
    margin-top: $margin-vertical;
  }
}

//Responsive widths for flex items
/// @access public
/// @param {Number, List} $noItems - The number of flex items
/// @param {String} $breakpoint - Selects the breakpoint for the middle value
@mixin flex-Width($noItems: 2, $breakpoint: "md") {
  @if (type-of($noItems) == "list" and list.length($noItems) == 3) {
    width: list.nth($noItems, 3);
  } @else if (type-of($noItems) == "list" and list.length($noItems) == 2) {
    width: list.nth($noItems, 2);
  } @else {
    width: 100%;
  }

  @if (type-of($noItems) == "list" and list.length($noItems) == 3) {
    @include include-media.media(">=#{$breakpoint}") {
      width: calc(100% / #{list.nth($noItems, 2)});
    }
  }

  @include include-media.media(">=lg") {
    @if (type-of($noItems) == "list") {
      width: calc(100% / #{list.nth($noItems, 1)});
    } @else {
      width: calc(100% / #{$noItems});
    }
  }
}

//-------------------------------
//     Position related mixins
//-------------------------------

//Position Absolute
/// @access public
/// @param {Number, String} $top - top value for element with position
/// @param {Number, String} $right - right value for element with position
/// @param {Number, String} $bottom - bottom value for element with position
/// @param {Number, String} $left - left value for element with position
/// @param {String} $position - Set position if it's other than absolute
@mixin setPosition(
  $top: auto,
  $right: auto,
  $bottom: auto,
  $left: auto,
  $position: absolute
) {
  position: $position;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;

  @content;
}

//Darken Image Backgrounds
/// @param {Number} $amount - The amount of shade to be applied
/// @param {Boolean} $hovEffect - Adds hover effect to the background
/// @param {String} $seconds - The duration of the whole transiiton
/// @param {Number} $hovAmount - The amount of shade to be applied on hover

@mixin darkenBg(
  $amount: 0.2,
  $hovEffect: false,
  $seconds: 0.5s,
  $hovAmount: 0.5
) {
  height: 100%;
  width: 100%;
  position: relative;
  background-color: rgba((variables.$black), $amount);
  z-index: variables.$z-1;

  @if (#{$hovEffect}) {
    .darken-img:hover {
      background-color: rgba((variables.$black), $hovAmount);
    }
  }
}
