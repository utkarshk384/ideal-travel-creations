@use "../abstracts/mixins";
@use "../vendors/include-media";

@use "sass:list";

//Default config for a button component
$default-btn: (
  color: black,
  border: 1px solid grey,
);

/// @access public
/// @param {Number} $width - Any css unit that is used on width proeprty
/// @param {map} $properties - Any css property value pair for the button style.

@mixin btn-basic($width, $properties: $default-btn) {
  width: calc(#{$width} * 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
  padding: calc(#{$width} * 0.075) calc(#{$width} * 0.025);

  @each $property, $value in $properties {
    #{$property}: $value;
  }
  @content;
  //Responsiveness
  @include include-media.media(">=md") {
    width: $width;
  }
}

//Button styles with animations for icon
/// @access public
/// @param {Number} $width - Any css unit that is used on width proeprty
/// @param {Hex, rgba, hsl} $bg-color - Any css unit that is used on bg-color property
/// @param {Number} $roundness - Any css unit that is usde on a border-radius property
/// @param {String} $icon - Hover effect Icon
/// @param {String} $icon-family - font family of the icon
/// @param {String} $icon-color - color of the icon
@mixin Button-anim-icon(
  $width,
  $properties: $default-btn,
  $icon,
  $icon-family,
  $icon-color: inherit
) {
  @include btn-basic(#{$width}, $properties);
  position: relative;
  transition: padding 0.2s linear 0s;

  &::before {
    content: "";
    @include mixins.setPosition(0, 0, auto, 0);
    transition: all 0.2s linear 0s;
    display: block;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 255, 255, 0.2);
    transform: scale(0, 1);
    transform-origin: right top;
  }

  &::after {
    content: $icon;
    opacity: 0;
    height: 100%;
    position: absolute;
    right: 0;
    display: flex;
    align-items: center;
    font-family: $icon-family;
    color: $icon-color;
    transition: all 0.2s linear 0s;
    justify-content: center;

    //Responsiveness
    @include include-media.media(">=md") {
      right: 0rem;
    }
  }
  @media (hover: hover) {
    &:hover {
      padding-left: calc(#{$width} * -0.05);
      padding-right: calc(#{$width} * 0.05);

      //Responsiveness
      @include include-media.media(">=md") {
        padding-left: calc(#{$width} * -0.1);
        padding-right: calc(#{$width} * 0.1);
      }

      &::before {
        transform: scale(1, 1);
        transform-origin: right center;
      }

      &::after {
        right: calc(#{$width} * 0.05);
        opacity: 1;

        //Responsiveness
        @include include-media.media(">=md") {
          right: calc(#{$width} * 0.15);
        }
      }
    }
  }
}

/// @access public
/// @param {Number} $width - Any css unit that is used on width proeprty.
/// @param {CSS Border Property} - The border that is to be applied for normal state.
/// @param {HEX, string, rgb, rgba} - The color that the font will change to on hover.
/// @param {HEX, string, rgb, rgba} - The color that the background will change to on hover.
/// @param {map} $properties - Any css property value pair for the button style.
@mixin btn-anim-outline(
  $width,
  $border: 1px solid black,
  $color-to: white,
  $bg-color: #3d3d3d,
  $properties: $default-btn
) {
  @include btn-basic(#{$width}, $properties);
  z-index: 1;
  position: relative;
  border: $border;
  color: inherit;
  overflow: hidden;
  transition: color 0.1s ease-in, border 0.1s ease-out;
  &::before {
    content: "";
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: -1;
    background: $bg-color;
    transition: top 0.1s ease-in;

    @content;
  }

  @media (hover: hover) {
    &:hover {
      border: 1px solid transparent;
      color: $color-to;
    }

    &:hover:before {
      top: 0;
    }
  }
}

/// @access public
/// @param {Number} $width - Any css unit that is used on width proeprty.
/// @param {CSS Border Property} - The border that is to be applied for normal state.
/// @param {map(HEX, string, rgb, rgba)} - The color that the font will change to on hover.
/// @param {HEX, string, rgb, rgba} - The color that the background will change to on hover.
/// @param {map} $properties - Any css property value pair for the button style.
@mixin btn-anim-fill-center(
  $width,
  $border: 1px solid black,
  $colors: [black, white],
  $bg-color: black,
  $properties: $default-btn
) {
  @include btn-basic(#{$width}, $properties);
  z-index: 1;
  position: relative;
  overflow: hidden;
  border: $border;
  color: list.nth($colors, 1);
  transition: color ease-in-out 500ms;
  
  @content;
  &::before {
    @include mixins.setPosition(50%, 50%, 0, 0);
    content: "";
    transform: translate(40%, -45%);
    background: transparent;
    z-index: -1;
    transition: all ease-in-out 250ms;
  }
  
  @media (hover: hover) {
    &:hover {
      color: list.nth($colors, 2);
    }

    &:hover:before {
      top: 0;
      right: 0;
      transform: translate(0%, 0%);
      background: $bg-color;
    }
  }
}
