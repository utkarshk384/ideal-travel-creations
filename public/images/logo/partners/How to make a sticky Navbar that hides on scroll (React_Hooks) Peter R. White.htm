<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta charset="utf-8"><meta http-equiv="x-ua-compatible" content="ie=edge"><meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"><style data-href="/styles.b1cfb269df601b34ffcf.css">body,html{height:100%;box-sizing:border-box;margin:0;padding:0}</style><meta name="generator" content="Gatsby 2.23.12"><title>How to make a sticky Navbar that hides on scroll (React/Hooks) | Peter R. White</title><meta data-react-helmet="true" name="description" content="A site written by a writer and developer"><meta data-react-helmet="true" property="og:url" content="https://www.prwhite.io/blog/sticky-navbar-hides-scroll"><meta data-react-helmet="true" property="og:title" content="How to make a sticky Navbar that hides on scroll (React/Hooks) | Peter R. White"><meta data-react-helmet="true" property="og:description" content="A site written by a writer and developer"><meta data-react-helmet="true" name="twitter:title" content="How to make a sticky Navbar that hides on scroll (React/Hooks) | Peter R. White"><meta data-react-helmet="true" name="twitter:description" content="A site written by a writer and developer"><link rel="icon" href="https://www.prwhite.io/favicon-32x32.png?v=9dc597d9345d1ac85890fd12a133f403" type="image/png"><link rel="manifest" href="https://www.prwhite.io/manifest.webmanifest"><link rel="apple-touch-icon" sizes="48x48" href="https://www.prwhite.io/icons/icon-48x48.png?v=9dc597d9345d1ac85890fd12a133f403"><link rel="apple-touch-icon" sizes="72x72" href="https://www.prwhite.io/icons/icon-72x72.png?v=9dc597d9345d1ac85890fd12a133f403"><link rel="apple-touch-icon" sizes="96x96" href="https://www.prwhite.io/icons/icon-96x96.png?v=9dc597d9345d1ac85890fd12a133f403"><link rel="apple-touch-icon" sizes="144x144" href="https://www.prwhite.io/icons/icon-144x144.png?v=9dc597d9345d1ac85890fd12a133f403"><link rel="apple-touch-icon" sizes="192x192" href="https://www.prwhite.io/icons/icon-192x192.png?v=9dc597d9345d1ac85890fd12a133f403"><link rel="apple-touch-icon" sizes="256x256" href="https://www.prwhite.io/icons/icon-256x256.png?v=9dc597d9345d1ac85890fd12a133f403"><link rel="apple-touch-icon" sizes="384x384" href="https://www.prwhite.io/icons/icon-384x384.png?v=9dc597d9345d1ac85890fd12a133f403"><link rel="apple-touch-icon" sizes="512x512" href="https://www.prwhite.io/icons/icon-512x512.png?v=9dc597d9345d1ac85890fd12a133f403"><link rel="preconnect" href="https://www.google-analytics.com/"><link rel="dns-prefetch" href="https://www.google-analytics.com/"><link href="How%20to%20make%20a%20sticky%20Navbar%20that%20hides%20on%20scroll%20(React_Hooks)%20Peter%20R.%20White_files/css.css" rel="stylesheet"><link as="script" rel="preload" href="How%20to%20make%20a%20sticky%20Navbar%20that%20hides%20on%20scroll%20(React_Hooks)%20Peter%20R.%20White_files/webpack-runtime-0cb109ce8ea661bc5631.js"><link as="script" rel="preload" href="How%20to%20make%20a%20sticky%20Navbar%20that%20hides%20on%20scroll%20(React_Hooks)%20Peter%20R.%20White_files/framework-93d3a746c3cf42acdafc.js"><link as="script" rel="preload" href="How%20to%20make%20a%20sticky%20Navbar%20that%20hides%20on%20scroll%20(React_Hooks)%20Peter%20R.%20White_files/styles-f7a64dad1c13bebc31fd.js"><link as="script" rel="preload" href="How%20to%20make%20a%20sticky%20Navbar%20that%20hides%20on%20scroll%20(React_Hooks)%20Peter%20R.%20White_files/app-8a47af226133c50a544b.js"><link as="script" rel="preload" href="How%20to%20make%20a%20sticky%20Navbar%20that%20hides%20on%20scroll%20(React_Hooks)%20Peter%20R.%20White_files/commons-61aa5488b066c84c4803.js"><link as="script" rel="preload" href="How%20to%20make%20a%20sticky%20Navbar%20that%20hides%20on%20scroll%20(React_Hooks)%20Peter%20R.%20White_files/component---src-templates-blog-js-ef57cc484f65283571df.js"><link as="fetch" rel="preload" href="https://www.prwhite.io/page-data/blog/sticky-navbar-hides-scroll/page-data.json" crossorigin="anonymous"><link as="fetch" rel="preload" href="https://www.prwhite.io/page-data/app-data.json" crossorigin="anonymous"><style data-emotion="css-global"></style><style data-emotion="css-global"></style><style data-emotion-css="1r3pxqq">.css-1r3pxqq{box-sizing:border-box;margin:0;min-width:0;min-height:100vh;background-color:white;}</style><style data-emotion-css="1vwh6k6">.css-1vwh6k6{box-sizing:border-box;margin:0;min-width:0;padding-bottom:200px;}</style><style data-emotion-css="nt859h">.css-nt859h{box-sizing:border-box;margin:0;min-width:0;position:fixed;z-index:100;top:0;width:100%;color:white;background-color:#212A2F;box-shadow:1px 3px 6px rgba(0,0,0,0.15);-webkit-transition:top 0.4s;transition:top 0.4s;}</style><style data-emotion-css="1ai26yn">.css-1ai26yn{box-sizing:border-box;margin:0;min-width:0;width:100%;-webkit-box-pack:space-evenly;-webkit-justify-content:space-evenly;-ms-flex-pack:space-evenly;justify-content:space-evenly;height:70px;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}</style><style data-emotion-css="18y8pln">.css-18y8pln{box-sizing:border-box;margin:0;min-width:0;font-family:sans-serif;font-weight:heading;line-height:heading;font-family:merriweather,sans-serif;font-size:46px;}.css-18y8pln normal{font-family:sans-serif;font-weight:600;}</style><style data-emotion-css="1tpzf1y">.css-1tpzf1y{box-sizing:border-box;margin:0;min-width:0;width:100%;-webkit-box-pack:space-evenly;-webkit-justify-content:space-evenly;-ms-flex-pack:space-evenly;justify-content:space-evenly;height:30px;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;border-top:1px solid rgb(120,120,120);display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}</style><style data-emotion-css="ai2gcq">.css-ai2gcq{box-sizing:border-box;margin:0;min-width:0;font-size:14px;font-family:source sans pro;border-radius:3px;padding-top:4px;padding-bottom:4px;padding-left:6px;padding-right:6px;-webkit-transition:all .5s;transition:all .5s;}.css-ai2gcq:hover{background-color:rgb(210,210,210);color:black;cursor:pointer;}</style><style data-emotion-css="9c1af3">.css-9c1af3{box-sizing:border-box;margin:0;min-width:0;font-size:14px;font-family:source sans pro;border-radius:3px;padding-top:4px;padding-bottom:4px;padding-left:6px;padding-right:6px;-webkit-transition:all .5s;transition:all .5s;}.css-9c1af3:hover{color:black;background-color:rgb(210,210,210);cursor:pointer;}</style><style data-emotion-css="1wez7lt">.css-1wez7lt{box-sizing:border-box;margin:0;min-width:0;width:100%;max-width:container;margin-left:auto;margin-right:auto;padding-top:100px;padding-left:15px;padding-right:15px;color:#222;font-family:open sans;}</style><style data-emotion-css="13daxe8">.css-13daxe8{box-sizing:border-box;margin:0;min-width:0;margin:0 auto;margin-top:40px;max-width:800px;font-size:17px;}</style><style data-emotion-css="j2t422">.css-j2t422{box-sizing:border-box;margin:0;min-width:0;font-family:sans-serif;font-weight:heading;line-height:heading;font-family:roboto;font-size:32px;margin-bottom:6px;}.css-j2t422 normal{font-family:sans-serif;font-weight:600;}</style><style data-emotion-css="lvpilb">.css-lvpilb{box-sizing:border-box;margin:0;min-width:0;color:rgb(100,100,100);margin-bottom:40px;}</style><style data-emotion-css="1tgmcrc">.css-1tgmcrc{box-sizing:border-box;margin:0;min-width:0;white-space:pre;background-color:#e8e8e8;border-radius:4px;padding-left:10px;padding-right:10px;overflow-x:scroll;line-spacing:1px;}</style><style data-emotion-css="i0xewy">.css-i0xewy{box-sizing:border-box;margin:0;min-width:0;font-family:inconsolata;font-size:16px;line-height:1.2rem;-webkit-letter-spacing:0.3px;-moz-letter-spacing:0.3px;-ms-letter-spacing:0.3px;letter-spacing:0.3px;}</style><style data-emotion-css="ty3a7v">.css-ty3a7v{box-sizing:border-box;margin:0;min-width:0;position:relative;width:100%;bottom:0;height:200px;background-color:#212A2F;font-family:roboto;}</style><style data-emotion-css="1b2tw1j">.css-1b2tw1j{box-sizing:border-box;margin:0;min-width:0;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}</style><style data-emotion-css="1qkdi6o">.css-1qkdi6o{box-sizing:border-box;margin:0;min-width:0;position:absolute;color:white;bottom:10px;font-size:11px;}</style><link rel="prefetch" href="https://www.prwhite.io/page-data/about/page-data.json" crossorigin="anonymous" as="fetch"><link rel="prefetch" href="https://www.prwhite.io/page-data/contact/page-data.json" crossorigin="anonymous" as="fetch"><link rel="prefetch" href="https://www.prwhite.io/page-data/blog/page-data.json" crossorigin="anonymous" as="fetch"><link rel="prefetch" href="https://www.prwhite.io/page-data/index/page-data.json" crossorigin="anonymous" as="fetch"><link rel="prefetch" href="https://www.prwhite.io/page-data/book-notes/page-data.json" crossorigin="anonymous" as="fetch"><link rel="prefetch" href="https://www.prwhite.io/component---src-pages-contact-js-9de9c4527ec323209001.js"><link rel="prefetch" href="How%20to%20make%20a%20sticky%20Navbar%20that%20hides%20on%20scroll%20(React_Hooks)%20Peter%20R.%20White_files/component---src-pages-about-js-2cf2146b790b9cdc247d.js"><link rel="prefetch" href="https://www.prwhite.io/component---src-pages-blog-js-e1de60b22d8db117e53a.js"><link rel="prefetch" href="How%20to%20make%20a%20sticky%20Navbar%20that%20hides%20on%20scroll%20(React_Hooks)%20Peter%20R.%20White_files/component---src-pages-index-js-55b67680bd27867d2620.js"><link rel="prefetch" href="How%20to%20make%20a%20sticky%20Navbar%20that%20hides%20on%20scroll%20(React_Hooks)%20Peter%20R.%20White_files/component---src-pages-book-notes-js-7ed196278668ae4bfecf.js"><script charset="utf-8" src="How%20to%20make%20a%20sticky%20Navbar%20that%20hides%20on%20scroll%20(React_Hooks)%20Peter%20R.%20White_files/component---src-pages-index-js-55b67680bd27867d2620.js"></script><script charset="utf-8" src="How%20to%20make%20a%20sticky%20Navbar%20that%20hides%20on%20scroll%20(React_Hooks)%20Peter%20R.%20White_files/component---src-pages-book-notes-js-7ed196278668ae4bfecf.js"></script><style data-emotion="css"></style><script charset="utf-8" src="How%20to%20make%20a%20sticky%20Navbar%20that%20hides%20on%20scroll%20(React_Hooks)%20Peter%20R.%20White_files/component---src-pages-about-js-2cf2146b790b9cdc247d.js"></script></head><body class="" data-new-gr-c-s-check-loaded="8.869.0" data-gr-ext-installed=""><script async="" src="How%20to%20make%20a%20sticky%20Navbar%20that%20hides%20on%20scroll%20(React_Hooks)%20Peter%20R.%20White_files/analytics.js"></script><script>(function() { try {
  var mode = localStorage.getItem('theme-ui-color-mode');
  if (!mode) return
  document.body.classList.add('theme-ui-' + mode);
} catch (e) {} })();</script><div id="___gatsby"><div style="outline:none" tabindex="-1" id="gatsby-focus-wrapper"><div class="css-1r3pxqq"><div class="css-1vwh6k6"><div class="css-1x0zcn5"><div class="css-1ai26yn"><a style="color:white;text-decoration:none" href="https://www.prwhite.io/"><h2 class="css-18y8pln">peter r. white</h2></a></div><div class="css-1tpzf1y"><a style="color:white;text-decoration:none" href="https://www.prwhite.io/blog"><div class="css-ai2gcq">All Posts</div></a><a style="color:white;text-decoration:none" href="https://www.prwhite.io/book-notes"><div class="css-9c1af3">Book Notes</div></a><a style="color:white;text-decoration:none" href="https://www.prwhite.io/about"><div class="css-9c1af3">About</div></a><a style="color:white;text-decoration:none" href="https://www.prwhite.io/contact"><div class="css-9c1af3">Contact</div></a></div></div><div class="css-1wez7lt"><div class="css-13daxe8"><h2 class="css-j2t422">How to make a sticky Navbar that hides on scroll (React/Hooks)</h2><div class="css-lvpilb">July 27th, 2020</div><p><i><b>Note -</b></i> <i><b>In
 the future I will host links to demos so you can see the code in 
action. In this case, aside from some extra styling, the code below is 
the exact code that powers the navbar on this site! </b></i></p><p><i><b>Also, If you want to skip ahead and see the final product, the complete code for the navbar is at the bottom.</b></i></p><p>This
 post will show you how to make a Navbar that "hides" by sliding up and 
off the page when the user starts to scroll down - the Navbar then 
glides down and back into view when the user scrolls back up toward the 
top of the page. I will be using React with Hooks.</p><p>This is a very 
common effect used for Navbars - especially on news sites and blogs that
 have a lot of readable content. Giving the user space to read is 
crucial if you want them to enjoy spending time on your site. </p><h2>Making the Navbar component</h2><p>In a new React project, make a file for your Navbar component. Mine will be located at <b>src/components/Navbar.js:</b></p><div class="css-1tgmcrc"><div class="css-i0xewy"><p><i><b>src/components/Navbar.js</b></i></p><p>import React, { useState } from 'react';   </p><p>const Navbar = () =&gt; {</p><p>  const navbarStyles = {
    position: 'fixed',
    height: '60px',
    width: '100%',
    backgroundColor: 'grey',
    textAlign: 'center'
  }</p><p>  return (
    &lt;div style={{ ...navbarStyles }}&gt;   
      Some Company Inc.
    &lt;/div&gt;
  );
};</p><p>export default Navbar;</p></div></div><p>This is very 
bare-bones - just a grey navbar with a company title in the center. In a
 real project there would be links added and more styling, but I am 
keeping it simple so we can stay on topic.</p><p>I am using objects to spread inline styles to keep the styling all in one file. Feel free to used <a href="https://styled-components.com/">styled components</a>, or any other preferred styling options.</p><p><i>Side
 note: when coding in React I prefer to keep my styles inside my 
Javascript files right next to my components because I like having 
everything visible and all in one place - I also think it makes 
conditional styling easier (which we will be doing here shortly).</i></p><h2>Adding some State</h2><p>Now that we have the basic skeleton of our navbar, let's add some state using React's <b>useState</b> hook. We will eventually use our state to determine whether to show or hide the navbar.</p><p>Your updated <b>Navbar.js</b> file should now look like this:</p><div class="css-1tgmcrc"><div class="css-i0xewy"><p><i><b>src/components/Navbar.js</b></i></p><p>import React, { useState } from 'react';     <span style="color:#0074D9">&lt;-- updated!</span>

const Navbar = () =&gt; {
  const [prevScrollPos, setPrevScrollPos] = useState(0);     <span style="color:#0074D9">&lt;-- new!</span>
  const [visible, setVisible] = useState(true);     <span style="color:#0074D9">&lt;-- new!</span>

  const navbarStyles = {
    position: 'fixed',
    height: '60px',
    width: '100%',
    backgroundColor: 'grey',
    textAlign: 'center'
  }

  return (
    &lt;div style={{ ...navbarStyles }}&gt;<span style="color:#0074D9">  </span> 
      Some Company Inc.
    &lt;/div&gt;
  );
};

export default Navbar;</p></div></div><p>All we did here was import <b>useState </b>and add two pieces of state to our component: <b>prevScrollPos</b> and <b>visible</b>.</p><p>The first, <b>prevScrollPos,</b>
 will represent the position of the "previous scroll." For example, when
 the user scrolls down the page, this piece of state will store where 
the user was on the page prior to beginning the scroll - as you can see,
 it is set to zero at the start, but it will always be a number 
representing a distance (measured in pixels) from the top of the page. 
Don't overthink this yet, it will make more sense a bit further down.</p><p>The second piece of state, <b>visible</b>, is a boolean value (true or false) that shows the Navbar when <b>true</b> and hides it when <b>false</b>.</p><p>However, right now these pieces of state are just sitting there not doing anything. Let's change this by adding a <b>useEffect </b>hook that tacks on a scroll event listener to the window when the component mounts,<b> </b>and add some conditional styling to the navbar:</p><div class="css-1tgmcrc"><div class="css-i0xewy"><p><i><b>src/components/Navbar.js
</b></i>
import React, { useState, useEffect } from 'react';     <span style="color:#0074D9">&lt;-- updated!</span>

const Navbar = () =&gt; {
  const [prevScrollPos, setPrevScrollPos] = useState(0); 
  const [visible, setVisible] = useState(true);  

  const navbarStyles = {
    position: 'fixed',
    height: '60px',
    width: '100%',
    backgroundColor: 'grey',
    textAlign: 'center'
  }

  const handleScroll = () =&gt; {      <span style="color:#0074D9">&lt;-- new function!</span>
    <span style="color:#0074D9">// find current scroll position</span>
    const currentScrollPos = window.pageYOffset;</p><p>    <span style="color:#0074D9">// set state based on location info (explained in more detail below)</span>
    setVisible((prevScrollPos &gt; currentScrollPos &amp;&amp; prevScrollPos - currentScrollPos &gt; 70) || currentScrollPos &lt; 10);</p><p><span style="color:#0074D9">    // set state to new scroll position</span>
    setPrevScrollPos(currentScrollPos);
  };

  useEffect(() =&gt; {     <span style="color:#0074D9">&lt;-- new useEffect!</span>
    window.addEventListener('scroll', handleScroll);
    
    return () =&gt; window.removeEventListener('scroll', handleScroll);

  }, [prevScrollPos, visible, handleScroll]);

  return (
    &lt;div style={{ ...navbarStyles, top: visible ? '0' : '-60px' }}&gt;     <span style="color:#0074D9">&lt;-- updated styling!  </span> 
      Some Company Inc.
    &lt;/div&gt;
  );
};

export default Navbar;</p></div></div><p>Okay, let's discuss what we added here.</p><p>We will start with that scroll event listener we added inside the <b>useEffect </b>hook. </p><h2>Adding the scroll event listener</h2><p><i>If you are not familiar with </i><i><b>useEffect</b></i><i>,
 think of it as the hook that fires once the component has mounted. It 
will then fire every time one of its dependencies (the items passed 
inside its "dependency array" - in this case </i><i><b>prevScrollPos</b></i><i>, </i><i><b>visible</b></i><i>, and </i><i><b>handleScroll</b></i><i>) changes. This is an oversimplification of useEffect but it will work for our purposes.</i></p><p>In our <b>useEffect</b>, we are adding an event listener to the window - in this case, a scroll event  listener that will fire off our <b>handleScroll</b> function each time the user scrolls up or down the page.

Note that we are also being "good react citizens" and "cleaning up" after ourselves inside the <b>useEffect </b>by including the <b>return</b> function that fires and <i>removes </i>the
 event listener when the component unmounts. If we forgot to do this, 
multiple event listeners would keep getting added to the window, and so 
each would fire whenever the user scrolled, which we definitely want to 
avoid.</p><p><i>It is a common occurrence in React to call upon the window in some way inside the </i><i><b>useEffect</b></i><i>
 hook, such as adding an event listener, as we do here - in these cases 
(as well as many others), always remember to include a cleanup function 
if necessary - it can be easy to forget to do!</i></p><p>Okay, so the <b>handleScroll</b> function fires every time the user scrolls, so what does this <b>handleScroll</b> function actually do?</p><h2>handleScroll </h2><p>As you can see above, the first thing the <b>handleScroll</b> function does is store the value of the current location of the window (aka the "post scroll" location) inside the <b>currentScrollPos </b>variable. It does this by calling <b>window.pageYOffset</b>, a window method that essentially returns the answer to the question: "how many pixels are we from the top of the page?"</p><p>Next, we want to use this updated <b>currentScrollPos</b> value to determine whether or not we should show or hide the navbar. </p><p>We
 know that we want to hide our navbar as the user scrolls down the page,
 but show it again should the user start to scroll back up the page. So,
 we need to know whether the most recent scroll was an "up scroll" or a 
"down scroll"...</p><p>We can accomplish this by determining whether the value of the location of the window <i>prior to the scroll</i> (aka <b>prevScrollPos</b>) is greater than our newly updated <b>currentScrollPos. </b>If
 the previous distance from the top of the window is greater than the 
newly updated distance, we know that the user has indeed just scrolled 
back <b>up</b> toward the top of the page.</p><p>Don't feel bad if it takes a second to digest this, but it makes perfect sense once you do! </p><p>And so it also follows that if the old value is <i>less</i> than the new, the opposite is true, and the user has just scrolled <b>down </b>the page.</p><p>As discussed above, the piece of state that decides whether the navbar is showing or hiding is <b>visible</b>. So now, inside the <b>handleScroll</b> function, we use <b>setVisible</b> to set <b>visible</b> to true if the case (described in detail above) is true:</p><div class="css-1tgmcrc"><div class="css-i0xewy"><p>const handleScroll = () =&gt; {
<span style="color:#0074D9">...</span>
  setVisible(prevScrollPos &gt; currentScrollPos);
<span style="color:#0074D9">...</span>
};</p></div></div><p>But wait, that's not what the code says above! What's the other stuff being left out?</p><p>Ah, how could I forget?</p><p>Well, we don't want to toggle the navbar on literally <i>every </i>last
 itty bitty scroll - what if the user scrolls back up a smidge just to 
read one line that is barely off-screen? It would be kind of annoying to
 the reader to have the navbar be that sensitive to movement.</p><p>So, 
let's not have the navbar drop back into view when the user scrolls back
 up the page unless the user has scrolled at least 70 pixels in one 
scroll. The 70 pixels is arbitrary, but it seemed like a good distance 
to me when I played around with it - feel free to make it 50 pixels, 80 
pixels, or whatever feels/looks right to you.</p><p>So now we arrive at this:</p><div class="css-1tgmcrc"><div class="css-i0xewy"><p>const handleScroll = () =&gt; {
<span style="color:#0074D9">...</span>
  setVisible(prevScrollPos &gt; currentScrollPos &amp;&amp; prevScrollPos - currentScrollPos &gt; 70);
<span style="color:#0074D9">...</span>
};</p></div></div><p>But wait, there's more!</p><p>What if the user 
scrolls only 60 pixels down the page, but then calls it quits and 
scrolls back up to the very top? If we left the code snippet above as 
is, the navbar would never reappear!</p><p>This is a bad look - we 
definitely want the navbar to always be showing whenever we are back at 
the top of the page. So, for good measure, let's ensure the navbar <i>always </i>shows whenever we are within 10 pixels of the very top of the page.</p><p>Finally, we arrive at the final form of the second piece of our <b>handleScroll</b> function:</p><div class="css-1tgmcrc"><div class="css-i0xewy"><p>const handleScroll = () =&gt; {
<span style="color:#0074D9">...</span>
  setVisible(prevScrollPos &gt; currentScrollPos &amp;&amp; prevScrollPos - currentScrollPos &gt; 70 || currentScrollPos &lt; 10);
<span style="color:#0074D9">...</span>
};</p></div></div><p>There is only one simple thing we need to do inside
 our handleScroll function before we break out of it: update the 
"previous scroll" state (<b>prevScrollPos</b>) to be the new <b>currentScrollPos</b> - so that the next time handleScroll fires, it is using the window location "where we last left off."</p><p>So, aside from one small update we will make at the very end, here is our handleScroll function in its entirety:</p><div class="css-1tgmcrc"><div class="css-i0xewy"><p>  const handleScroll = () =&gt; {
    const currentScrollPos = window.pageYOffset;

    setVisible((prevScrollPos &gt; currentScrollPos &amp;&amp; prevScrollPos - currentScrollPos &gt; 70) || currentScrollPos &lt; 10);

    setPrevScrollPos(currentScrollPos);
  };</p></div></div><h2>Conditionally styling the Navbar using state</h2><p>Now that the <b>handleScroll</b> function is updating the necessary piece of state (<b>visible</b>) when the user scrolls, let's make it official by using inline styles, the CSS <b>top</b> property, and the always useful <b>ternary operator</b> to show/hide the Navbar.</p><p>The Navbar &lt;div&gt; being returned should now look like this:</p><div class="css-1tgmcrc"><div class="css-i0xewy"><p>&lt;div style={{ ...navbarStyles, top: visible ? '0' : '-60px' }}&gt;
      Some Company Inc.
&lt;/div&gt;</p></div></div><p>Wait, why don't we just use the CSS <b>display </b>property to toggle the Navbar? Why are we using <b>top</b> with a negative number to stash the navbar out of sight above the window? Seems trashy...</p><p>The
 answer to this fair question is that we don't just want the Navbar to 
appear and disappear instantaneously - that would be a little jarring 
and not make for the best UI.</p><p>Instead we want to add an animation 
to make it glide smoothly on and off the page. This is a very quick and 
easy update - let's do it now!</p><h2>Making the Navbar move smoothly with CSS transition</h2><p>All we have to do to make the Navbar transition smoothly is add this one line to the Navbar's style object:</p><div class="css-1tgmcrc"><div class="css-i0xewy"><p><span style="color:#0074D9">...
</span>const navbarStyles = {
    position: 'fixed',
    height: '60px',
    width: '100%',
    backgroundColor: 'grey',
    textAlign: 'center',
    transition: 'top 0.6s'     <span style="color:#0074D9">&lt;-- new!</span>  
  }
<span style="color:#0074D9">...
</span>return (<span style="color:#0074D9">
 </span>&lt;div style={{ ...navbarStyles, top: visible ? '0' : '-60px' }}&gt;
        Some Company Inc.
  &lt;/div&gt;
);
<span style="color:#0074D9">...</span></p></div></div><p>This tells the Navbar "hey, whenever something triggers your <b>top</b> property to change, make that UI change happen in 0.6 seconds, rather than instantaneously."</p><p>Since
 the change happening in our code is an upward shift of the Navbar to be
 60 pixels above the top of the screen, this will create the desired 
"upward slide" effect.</p><p>Yes, 0.6 seconds is not a long time, but it
 is just long enough to give the effect of a glide. Feel free to alter 
the count to speed up or slow down the transition to your liking.</p><h2>One final update: adding debounce()</h2><p>We are basically done, but there is room for one final improvement.</p><p>Right now, our <b>handleScroll</b>
 function is being triggered for literally every pixel of scroll 
movement. In other words, because it is directly attached to our scroll 
event listener with no buffer in between, this function gets fired a 
zillion times whenever the user scrolls. </p><p>Not only is this 
unnecessary, it can also break the UI as it can cause our Navbar 
component to flicker or generally spazz out, as its state is being asked
 to update at an absurd speed - the browser will probably have trouble 
keeping up with all these re-renders.</p><p><i>The "too many renders" 
problem is a very common theme in React, and something you should always
 consider whenever you build a stateful component!</i></p><p><b>Debounce</b> to the rescue!</p><p>The <b>debounce</b> function should be a tool in every developer's arsenal. In short, to quote <a href="https://davidwalsh.name/javascript-debounce-function">David Walsh</a>, what it does is "limit the rate at which a function can fire."</p><p><i>Not
 only will debounce be useful for this post/tutorial, but once you know 
that it exists, you will see that it can come in handy in many other 
places.</i></p><p>This will allow us to set a limit (in milliseconds) on how often our <b>handleScroll</b> function can fire.</p><p>For the sake of keeping things organized, and because <b>debounce</b> is not a native Javascript method, we are going to copy and paste the code to the debounce function (using the <a href="https://davidwalsh.name/javascript-debounce-function">version</a>
 found on David Walsh's blog) into a new file in our project. Then, we 
will export the function from there and import it and use it inside our <b>Navbar.js </b>file.</p><p>So,
 let's first create a file where we can store useful functions that can 
be exported anywhere across our project. Then, let's copy, paste, and 
lastly export the <b>debounce</b> function we are stealing from David Walsh.</p><p>I will call this file <b>helpers.js</b> and by convention I will keep it inside a folder called <b>utilities</b> that lives inside the <b>src</b> folder - but feel free to store it wherever you want, so long as you can still export it:</p><div class="css-1tgmcrc"><div class="css-i0xewy"><p><i><b>src/utilities/helpers.js</b></i></p><p>export function debounce(func, wait, immediate) {
	var timeout;
	return function() {
		var context = this, args = arguments;
		var later = function() {
			timeout = null;
			if (!immediate) func.apply(context, args);
		};
		var callNow = immediate &amp;&amp; !timeout;
		clearTimeout(timeout);
		timeout = setTimeout(later, wait);
		if (callNow) func.apply(context, args);
	};
};</p></div></div><p>Now that we have exported <b>debounce</b> inside our codebase, all we need to do is import it into <b>Navbar.js </b>to use it on our handleScroll function.</p><p>Here is what the syntax looks like when using <b>debounce</b> (in this case we are going to set the time interval to 100 milliseconds):  </p><div class="css-1tgmcrc"><div class="css-i0xewy"><p><i><b>src/components/Navbar.js
</b></i><span style="color:#0074D9">...</span>
import { debounce } from from '../utilities/helpers';
<span style="color:#0074D9">...</span>
const handleScroll = debounce(() =&gt; {     <span style="color:#0074D9">&lt;-- debounce wrapper added!</span>
    const currentScrollPos = window.pageYOffset;

    setVisible((prevScrollPos &gt; currentScrollPos &amp;&amp; prevScrollPos - currentScrollPos &gt; 70) || currentScrollPos &lt; 10);

    setPrevScrollPos(currentScrollPos);
  }, 100);          <span style="color:#0074D9">&lt;-- timer set to 100 milliseconds!</span>
<span style="color:#0074D9">...</span></p></div></div><p>And we're done! </p><h2>The final product</h2><p>Thanks for reading! Here is the final Navbar component:</p><div class="css-1tgmcrc"><div class="css-i0xewy"><p><i><b>src/components/Navbar.js</b></i></p><p>import React, { useState, useEffect } from 'react'; 
import { debounce } from '../utilities/helpers';  </p><p>const Navbar = () =&gt; {
  const [prevScrollPos, setPrevScrollPos] = useState(0); 
  const [visible, setVisible] = useState(true);  </p><p>  const handleScroll = debounce(() =&gt; {
    const currentScrollPos = window.pageYOffset;</p><p>    setVisible((prevScrollPos &gt; currentScrollPos &amp;&amp; prevScrollPos - currentScrollPos &gt; 70) || currentScrollPos &lt; 10);</p><p>    setPrevScrollPos(currentScrollPos);
  }, 100);</p><p>  useEffect(() =&gt; {
    window.addEventListener('scroll', handleScroll);</p><p>    return () =&gt; window.removeEventListener('scroll', handleScroll);

  }, [prevScrollPos, visible, handleScroll]);</p><p>  const navbarStyles = {
    position: 'fixed',
    height: '60px',
    width: '100%',
    backgroundColor: 'grey',
    textAlign: 'center',
    transition: 'top 0.6s' 
  }</p><p>  return (
    &lt;div style={{ ...navbarStyles, top: visible ? '0' : '-60px' }}&gt;  
      Some Company Inc.
    &lt;/div&gt;
  );
};</p><p>export default Navbar;</p></div></div><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p></div></div></div></div><div class="css-ty3a7v"><div class="css-1b2tw1j"><div class="css-1qkdi6o">© <!-- -->2021<!-- --> All Rights Reserved</div></div></div></div><div id="gatsby-announcer" style="position:absolute;top:0;width:1px;height:1px;padding:0;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border:0" aria-live="assertive" aria-atomic="true"></div></div><script>
  
  
  if(true) {
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
  }
  if (typeof ga === "function") {
    ga('create', 'UA-134330662-7', 'auto', {});
      
      
      
      
      
      }</script><script id="gatsby-script-loader">/*<![CDATA[*/window.pagePath="/blog/sticky-navbar-hides-scroll";/*]]>*/</script><script id="gatsby-chunk-mapping">/*<![CDATA[*/window.___chunkMapping={"app":["/app-8a47af226133c50a544b.js"],"component---src-pages-404-js":["/component---src-pages-404-js-4211a43b7c8cbe4d7011.js"],"component---src-pages-about-js":["/component---src-pages-about-js-2cf2146b790b9cdc247d.js"],"component---src-pages-blog-js":["/component---src-pages-blog-js-e1de60b22d8db117e53a.js"],"component---src-pages-book-notes-js":["/component---src-pages-book-notes-js-7ed196278668ae4bfecf.js"],"component---src-pages-contact-js":["/component---src-pages-contact-js-9de9c4527ec323209001.js"],"component---src-pages-index-js":["/component---src-pages-index-js-55b67680bd27867d2620.js"],"component---src-templates-blog-js":["/component---src-templates-blog-js-ef57cc484f65283571df.js"]};/*]]>*/</script><script src="How%20to%20make%20a%20sticky%20Navbar%20that%20hides%20on%20scroll%20(React_Hooks)%20Peter%20R.%20White_files/component---src-templates-blog-js-ef57cc484f65283571df.js" async=""></script><script src="How%20to%20make%20a%20sticky%20Navbar%20that%20hides%20on%20scroll%20(React_Hooks)%20Peter%20R.%20White_files/commons-61aa5488b066c84c4803.js" async=""></script><script src="How%20to%20make%20a%20sticky%20Navbar%20that%20hides%20on%20scroll%20(React_Hooks)%20Peter%20R.%20White_files/app-8a47af226133c50a544b.js" async=""></script><script src="How%20to%20make%20a%20sticky%20Navbar%20that%20hides%20on%20scroll%20(React_Hooks)%20Peter%20R.%20White_files/styles-f7a64dad1c13bebc31fd.js" async=""></script><script src="How%20to%20make%20a%20sticky%20Navbar%20that%20hides%20on%20scroll%20(React_Hooks)%20Peter%20R.%20White_files/framework-93d3a746c3cf42acdafc.js" async=""></script><script src="How%20to%20make%20a%20sticky%20Navbar%20that%20hides%20on%20scroll%20(React_Hooks)%20Peter%20R.%20White_files/webpack-runtime-0cb109ce8ea661bc5631.js" async=""></script></body></html>